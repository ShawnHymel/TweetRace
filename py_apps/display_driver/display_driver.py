# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_display_driver', [dirname(__file__)])
        except ImportError:
            import _display_driver
            return _display_driver
        if fp is not None:
            try:
                _mod = imp.load_module('_display_driver', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _display_driver = swig_import_helper()
    del swig_import_helper
else:
    import _display_driver
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_charArray(*args):
  return _display_driver.new_charArray(*args)
new_charArray = _display_driver.new_charArray

def delete_charArray(*args):
  return _display_driver.delete_charArray(*args)
delete_charArray = _display_driver.delete_charArray

def charArray_getitem(*args):
  return _display_driver.charArray_getitem(*args)
charArray_getitem = _display_driver.charArray_getitem

def charArray_setitem(*args):
  return _display_driver.charArray_setitem(*args)
charArray_setitem = _display_driver.charArray_setitem
class display_driver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, display_driver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, display_driver, name)
    __repr__ = _swig_repr
    NUM_STRINGS = _display_driver.display_driver_NUM_STRINGS
    CHARS_PER_STRING = _display_driver.display_driver_CHARS_PER_STRING
    def __init__(self): 
        this = _display_driver.new_display_driver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _display_driver.delete_display_driver
    __del__ = lambda self : None;
    def update_string(self, *args): return _display_driver.display_driver_update_string(self, *args)
display_driver_swigregister = _display_driver.display_driver_swigregister
display_driver_swigregister(display_driver)

# This file is compatible with both classic and new-style classes.


